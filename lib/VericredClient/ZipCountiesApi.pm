#
# Copyright 2016 SmartBear Software
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
#
package VericredClient::ZipCountiesApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use VericredClient::ApiClient;
use VericredClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => VericredClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# get_zip_counties
#
# Search for Zip Counties
# 
# @param string $zip_prefix Partial five-digit Zip (required)
{
    my $params = {
    'zip_prefix' => {
        data_type => 'string',
        description => 'Partial five-digit Zip',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ get_zip_counties } = { 
    	summary => 'Search for Zip Counties',
        params => $params,
        returns => 'ZipCountyResponse',
        };
}
# @return ZipCountyResponse
#
sub get_zip_counties {
    my ($self, %args) = @_;

    # verify the required parameter 'zip_prefix' is set
    unless (exists $args{'zip_prefix'}) {
      croak("Missing the required parameter 'zip_prefix' when calling get_zip_counties");
    }

    # parse inputs
    my $_resource_path = '/zip_counties';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'zip_prefix'}) {
        $query_params->{'zip_prefix'} = $self->{api_client}->to_query_value($args{'zip_prefix'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(Vericred-Api-Key )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ZipCountyResponse', $response);
    return $_response_object;
}

1;
