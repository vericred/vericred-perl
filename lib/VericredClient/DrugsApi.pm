#
# Copyright 2016 SmartBear Software
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
#
package VericredClient::DrugsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use VericredClient::ApiClient;
use VericredClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => VericredClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# get_drug_coverages
#
# Search for DrugCoverages
# 
# @param string $ndc_package_code NDC package code (required)
# @param string $audience Two-character state code (required)
# @param string $state_code Two-character state code (required)
# @param string $vericred_api_key API Key (optional)
{
    my $params = {
    'ndc_package_code' => {
        data_type => 'string',
        description => 'NDC package code',
        required => '1',
    },
    'audience' => {
        data_type => 'string',
        description => 'Two-character state code',
        required => '1',
    },
    'state_code' => {
        data_type => 'string',
        description => 'Two-character state code',
        required => '1',
    },
    'vericred_api_key' => {
        data_type => 'string',
        description => 'API Key',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ get_drug_coverages } = { 
    	summary => 'Search for DrugCoverages',
        params => $params,
        returns => 'DrugCoverageResponse',
        };
}
# @return DrugCoverageResponse
#
sub get_drug_coverages {
    my ($self, %args) = @_;

    # verify the required parameter 'ndc_package_code' is set
    unless (exists $args{'ndc_package_code'}) {
      croak("Missing the required parameter 'ndc_package_code' when calling get_drug_coverages");
    }

    # verify the required parameter 'audience' is set
    unless (exists $args{'audience'}) {
      croak("Missing the required parameter 'audience' when calling get_drug_coverages");
    }

    # verify the required parameter 'state_code' is set
    unless (exists $args{'state_code'}) {
      croak("Missing the required parameter 'state_code' when calling get_drug_coverages");
    }

    # parse inputs
    my $_resource_path = '/drug_packages/{ndc_package_code}/coverages';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'audience'}) {
        $query_params->{'audience'} = $self->{api_client}->to_query_value($args{'audience'});
    }

    # query params
    if ( exists $args{'state_code'}) {
        $query_params->{'state_code'} = $self->{api_client}->to_query_value($args{'state_code'});
    }

    # header params
    if ( exists $args{'vericred_api_key'}) {
        $header_params->{'Vericred-Api-Key'} = $self->{api_client}->to_header_value($args{'vericred_api_key'});
    }

    # path params
    if ( exists $args{'ndc_package_code'}) {
        my $_base_variable = "{" . "ndc_package_code" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ndc_package_code'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DrugCoverageResponse', $response);
    return $_response_object;
}

#
# list_drugs
#
# Drug Search
# 
# @param string $search_term Full or partial proprietary name of drug (required)
# @param string $vericred_api_key API Key (optional)
{
    my $params = {
    'search_term' => {
        data_type => 'string',
        description => 'Full or partial proprietary name of drug',
        required => '1',
    },
    'vericred_api_key' => {
        data_type => 'string',
        description => 'API Key',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ list_drugs } = { 
    	summary => 'Drug Search',
        params => $params,
        returns => 'DrugSearchResponse',
        };
}
# @return DrugSearchResponse
#
sub list_drugs {
    my ($self, %args) = @_;

    # verify the required parameter 'search_term' is set
    unless (exists $args{'search_term'}) {
      croak("Missing the required parameter 'search_term' when calling list_drugs");
    }

    # parse inputs
    my $_resource_path = '/drugs';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'search_term'}) {
        $query_params->{'search_term'} = $self->{api_client}->to_query_value($args{'search_term'});
    }

    # header params
    if ( exists $args{'vericred_api_key'}) {
        $header_params->{'Vericred-Api-Key'} = $self->{api_client}->to_header_value($args{'vericred_api_key'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DrugSearchResponse', $response);
    return $_response_object;
}

1;
