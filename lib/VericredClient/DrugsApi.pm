=begin comment

Vericred API

Vericred's API allows you to search for Health Plans that a specific doctor
accepts.

## Getting Started

Visit our [Developer Portal](https://vericred.3scale.net) to
create an account.

Once you have created an account, you can create one Application for
Production and another for our Sandbox (select the appropriate Plan when
you create the Application).

## Authentication

To authenticate, pass the API Key you created in the Developer Portal as
a `Vericred-Api-Key` header.

`curl -H 'Vericred-Api-Key: YOUR_KEY' "https://api.vericred.com/providers?search_term=Foo&zip_code=11215"`

## Versioning

Vericred's API default to the latest version.  However, if you need a specific
version, you can request it with an `Accept-Version` header.

The current version is `v3`.  Previous versions are `v1` and `v2`.

`curl -H 'Vericred-Api-Key: YOUR_KEY' -H 'Accept-Version: v2' "https://api.vericred.com/providers?search_term=Foo&zip_code=11215"`

## Pagination

Endpoints that accept `page` and `per_page` parameters are paginated. They expose
four additional fields that contain data about your position in the response,
namely `Total`, `Per-Page`, `Link`, and `Page` as described in [RFC-5988](https://tools.ietf.org/html/rfc5988).

For example, to display 5 results per page and view the second page of a
`GET` to `/networks`, your final request would be `GET /networks?....page=2&per_page=5`.

## Sideloading

When we return multiple levels of an object graph (e.g. `Provider`s and their `State`s
we sideload the associated data.  In this example, we would provide an Array of
`State`s and a `state_id` for each provider.  This is done primarily to reduce the
payload size since many of the `Provider`s will share a `State`

```
{
  providers: [{ id: 1, state_id: 1}, { id: 2, state_id: 1 }],
  states: [{ id: 1, code: 'NY' }]
}
```

If you need the second level of the object graph, you can just match the
corresponding id.

## Selecting specific data

All endpoints allow you to specify which fields you would like to return.
This allows you to limit the response to contain only the data you need.

For example, let's take a request that returns the following JSON by default

```
{
  provider: {
    id: 1,
    name: 'John',
    phone: '1234567890',
    field_we_dont_care_about: 'value_we_dont_care_about'
  },
  states: [{
    id: 1,
    name: 'New York',
    code: 'NY',
    field_we_dont_care_about: 'value_we_dont_care_about'
  }]
}
```

To limit our results to only return the fields we care about, we specify the
`select` query string parameter for the corresponding fields in the JSON
document.

In this case, we want to select `name` and `phone` from the `provider` key,
so we would add the parameters `select=provider.name,provider.phone`.
We also want the `name` and `code` from the `states` key, so we would
add the parameters `select=states.name,staes.code`.  The id field of
each document is always returned whether or not it is requested.

Our final request would be `GET /providers/12345?select=provider.name,provider.phone,states.name,states.code`

The response would be

```
{
  provider: {
    id: 1,
    name: 'John',
    phone: '1234567890'
  },
  states: [{
    id: 1,
    name: 'New York',
    code: 'NY'
  }]
}
```



OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package VericredClient::DrugsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use VericredClient::ApiClient;
use VericredClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => VericredClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# get_drug_coverages
#
# Search for DrugCoverages
# 
# @param string $ndc_package_code NDC package code (required)
# @param string $audience Two-character state code (required)
# @param string $state_code Two-character state code (required)
{
    my $params = {
    'ndc_package_code' => {
        data_type => 'string',
        description => 'NDC package code',
        required => '1',
    },
    'audience' => {
        data_type => 'string',
        description => 'Two-character state code',
        required => '1',
    },
    'state_code' => {
        data_type => 'string',
        description => 'Two-character state code',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_drug_coverages' } = { 
    	summary => 'Search for DrugCoverages',
        params => $params,
        returns => 'DrugCoverageResponse',
        };
}
# @return DrugCoverageResponse
#
sub get_drug_coverages {
    my ($self, %args) = @_;

    # verify the required parameter 'ndc_package_code' is set
    unless (exists $args{'ndc_package_code'}) {
      croak("Missing the required parameter 'ndc_package_code' when calling get_drug_coverages");
    }

    # verify the required parameter 'audience' is set
    unless (exists $args{'audience'}) {
      croak("Missing the required parameter 'audience' when calling get_drug_coverages");
    }

    # verify the required parameter 'state_code' is set
    unless (exists $args{'state_code'}) {
      croak("Missing the required parameter 'state_code' when calling get_drug_coverages");
    }

    # parse inputs
    my $_resource_path = '/drug_packages/{ndc_package_code}/coverages';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'audience'}) {
        $query_params->{'audience'} = $self->{api_client}->to_query_value($args{'audience'});
    }

    # query params
    if ( exists $args{'state_code'}) {
        $query_params->{'state_code'} = $self->{api_client}->to_query_value($args{'state_code'});
    }

    # path params
    if ( exists $args{'ndc_package_code'}) {
        my $_base_variable = "{" . "ndc_package_code" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ndc_package_code'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(Vericred-Api-Key )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DrugCoverageResponse', $response);
    return $_response_object;
}

#
# list_drugs
#
# Drug Search
# 
# @param string $search_term Full or partial proprietary name of drug (required)
{
    my $params = {
    'search_term' => {
        data_type => 'string',
        description => 'Full or partial proprietary name of drug',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_drugs' } = { 
    	summary => 'Drug Search',
        params => $params,
        returns => 'DrugSearchResponse',
        };
}
# @return DrugSearchResponse
#
sub list_drugs {
    my ($self, %args) = @_;

    # verify the required parameter 'search_term' is set
    unless (exists $args{'search_term'}) {
      croak("Missing the required parameter 'search_term' when calling list_drugs");
    }

    # parse inputs
    my $_resource_path = '/drugs';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'search_term'}) {
        $query_params->{'search_term'} = $self->{api_client}->to_query_value($args{'search_term'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(Vericred-Api-Key )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DrugSearchResponse', $response);
    return $_response_object;
}

1;
