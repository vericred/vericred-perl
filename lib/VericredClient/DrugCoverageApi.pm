#
# Copyright 2016 SmartBear Software
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
#
package VericredClient::DrugCoverageApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use VericredClient::ApiClient;
use VericredClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => VericredClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# drugs_ndc_coverages_get
#
# Find Drug Coverages for a given NDC
# 
# @param string $ndc NDC for a drug (required)
{
    my $params = {
    'ndc' => {
        data_type => 'string',
        description => 'NDC for a drug',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ drugs_ndc_coverages_get } = { 
    	summary => 'Find Drug Coverages for a given NDC',
        params => $params,
        returns => 'ARRAY[DrugCoverage]',
        };
}
# @return ARRAY[DrugCoverage]
#
sub drugs_ndc_coverages_get {
    my ($self, %args) = @_;

    # verify the required parameter 'ndc' is set
    unless (exists $args{'ndc'}) {
      croak("Missing the required parameter 'ndc' when calling drugs_ndc_coverages_get");
    }

    # parse inputs
    my $_resource_path = '/drugs/{ndc}/coverages';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'ndc'}) {
        my $_base_variable = "{" . "ndc" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'ndc'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DrugCoverage]', $response);
    return $_response_object;
}

1;
